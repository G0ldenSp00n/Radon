"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function asyncGeneratorStep(t,e,r,n,i,o,s){try{var u=t[o](s),a=u.value}catch(t){return void r(t)}u.done?e(a):Promise.resolve(a).then(n,i)}function _asyncToGenerator(u){return function(){var t=this,s=arguments;return new Promise(function(e,r){var n=u.apply(t,s);function i(t){asyncGeneratorStep(n,e,r,i,o,"next",t)}function o(t){asyncGeneratorStep(n,e,r,i,o,"throw",t)}i(void 0)})}}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}Object.defineProperty(exports,"__esModule",{value:!0}),require("@babel/polyfill");var ConstructorNode=function(){function r(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;_classCallCheck(this,r),this.name=t,this.state={},this.parent=e,this.initializeState=this.initializeState.bind(this),this.initializeModifiers=this.initializeModifiers.bind(this)}return _createClass(r,[{key:"initializeState",value:function(e){var r=this;if("object"!==_typeof(e)||Array.isArray(e))throw new Error("Input must be an object");Object.keys(e).forEach(function(t){r.state[t]={value:e[t],modifiers:r.state[t]?r.state[t].modifiers:{}}})}},{key:"initializeModifiers",value:function(e){var r=this;if("object"!==_typeof(e)||Array.isArray(e))throw new Error("Input must be an object");Object.keys(e).forEach(function(t){r.state[t]={value:r.state[t]?r.state[t].value:null,modifiers:e[t]}})}},{key:"name",set:function(t){if("string"!=typeof t)throw new Error("Name must be a string");this._name=t},get:function(){return this._name}},{key:"parent",set:function(t){if("string"!=typeof t&&null!==t)throw new Error("Parent must be a string");this._parent=t},get:function(){return this._parent}},{key:"state",set:function(t){this._state=t},get:function(){return this._state}}]),r}(),ARRAY="ARRAY",OBJECT="OBJECT",PRIMITIVE="PRIMITIVE",CONTAINER="CONTAINER",types=Object.freeze({ARRAY:ARRAY,OBJECT:OBJECT,PRIMITIVE:PRIMITIVE,CONTAINER:CONTAINER}),VirtualNode=function(){function o(t,e){var r=this;if(_classCallCheck(this,o),this.parent=null,this.parents={},t.parent){this.parent=t.parent.virtualNode,this.parents[this.parent.name]=this.parent;for(var n=this.parent;null!==n.parent;)n=n.parent,this.parents[n.name]=n}if(this.name=t.name,this.type=t.type,this.id=t.id,this.type===PRIMITIVE?this.val=t.value:(this.val={},this.type===ARRAY&&(this.val=[])),t.type!==CONTAINER){var i=t.name;i.includes("_")&&(i=i.split("_")[i.split("_").length-1]),(t.parent.virtualNode.val[i]=this).parent.type===CONTAINER&&(this.parent[i]=this)}t.modifiers&&Object.keys(e).forEach(function(t){r[t]=e[t]})}return _createClass(o,[{key:"updateTo",value:function(t){this.val=t}}]),o}(),SiloNode=function(){function c(t,e){var o=this,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{},i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:PRIMITIVE,s=5<arguments.length&&void 0!==arguments[5]?arguments[5]:null;_classCallCheck(this,c),this.name=t,this.value=e,this.modifiers=n,this.queue=[],this.subscribers=[],this.parent=r,this.type=i,this.devTool=s,this.linkModifiers=this.linkModifiers.bind(this),this.runModifiers=this.runModifiers.bind(this),this.notifySubscribers=this.notifySubscribers.bind(this),this.getState=this.getState.bind(this),this.reconstructArray=this.reconstructArray.bind(this),this.reconstructObject=this.reconstructObject.bind(this),this.deconstructObjectIntoSiloNodes=this.deconstructObjectIntoSiloNodes.bind(this),this.reconstruct=this.reconstruct.bind(this),this.pushToSubscribers=this.pushToSubscribers.bind(this),this.removeFromSubscribersAtIndex=this.removeFromSubscribersAtIndex(this),this.runQueue=this.runModifiers(),"ARRAY"!==this.type&&"OBJECT"!==this.type||(this.modifiers.keySubscribe=function(t,e){var r=o.name+"_"+t,n=o.value[r],i=n.pushToSubscribers(e);return n.notifySubscribers(),function(){n._subscribers.splice(i,1)}}),this.id,this.issueID(),this.virtualNode=new VirtualNode(this,this.modifiers)}return _createClass(c,[{key:"pushToSubscribers",value:function(t){this.subscribers.push(t)}},{key:"removeFromSubscribersAtIndex",value:function(t){this.subcribers=this.subscribers.slice(t,1)}},{key:"issueID",value:function(){null===this.parent?this._id=this.name:this._id=this.parent.id+"."+this.name}},{key:"notifySubscribers",value:function(){var e=this;0!==this.subscribers.length&&this.subscribers.forEach(function(t){if("function"!=typeof t)throw new Error("Subscriber array must only contain functions");t(e.getState())})}},{key:"runModifiers",value:function(){var n=!1;function t(){return(t=_asyncToGenerator(regeneratorRuntime.mark(function t(){var e,r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!1!==n){t.next=16;break}n=!0;case 2:if(0<this.queue.length)return e=this.queue.shift(),r=null,this.devTool&&(r=this.type!==PRIMITIVE?this.reconstruct(this.name,this):this.value),t.next=8,e();t.next=15;break;case 8:this.value=t.sent,this.devTool&&this.devTool.notify(r,this.value,this.name,e.modifierName),this.virtualNode.updateTo(this.value),this.type!==PRIMITIVE&&(this.value=this.deconstructObjectIntoSiloNodes().value),this.notifySubscribers(),t.next=2;break;case 15:n=!1;case 16:case"end":return t.stop()}},t,this)}))).apply(this,arguments)}return function(){return t.apply(this,arguments)}}},{key:"deconstructObjectIntoSiloNodes",value:function(){var t,e,r=this,n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.name,i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:this.parent,s=3<arguments.length&&void 0!==arguments[3]&&arguments[3],u={};t=Array.isArray(i.value)?(e=i.value,ARRAY):(e=Object.keys(i.value),OBJECT);var a=new c(n,u,o,i.modifiers,t,this.devTool);return Array.isArray(i.value)&&0<i.value.length?i.value.forEach(function(t,e){"object"===_typeof(t)?u["".concat(n,"_").concat(e)]=r.deconstructObjectIntoSiloNodes("".concat(n,"_").concat(e),{value:t},a,s):u["".concat(n,"_").concat(e)]=new c("".concat(n,"_").concat(e),t,a,{},PRIMITIVE,r.devTool)}):0<e.length&&e.forEach(function(t){"object"===_typeof(i.value[t])?u["".concat(n,"_").concat(t)]=r.deconstructObjectIntoSiloNodes("".concat(n,"_").concat(t),{value:i.value[t]},a,s):u["".concat(n,"_").concat(t)]=new c("".concat(n,"_").concat(t),i.value[t],a,{},PRIMITIVE,r.devTool)}),s&&a.linkModifiers(),a}},{key:"linkModifiers",value:function(){var s=this,u=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.name,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.modifiers;if(t&&0!==Object.keys(t).length){var a=this;Object.keys(t).forEach(function(n){var r,i=t[n];if("function"!=typeof i)throw new Error("All modifiers must be functions");if(i.length<=2)a.type===PRIMITIVE?r=function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,i(a.value,e);case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}},t,this)}));return function(t){return e.apply(this,arguments)}}():a.type!==OBJECT&&a.type!==ARRAY||(r=function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,i(s.reconstruct(u,a),e);case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}},t,this)}));return function(t){return e.apply(this,arguments)}}()),s.modifiers[n]=function(e){var t=function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,r(e);case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}();s.devTool&&(t.modifierName=n),a.queue.push(t),a.runQueue()};else if(2<i.length){var o=function(){var r=_asyncToGenerator(regeneratorRuntime.mark(function t(e,r){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,i(s.reconstruct(e,a.value[e]),e,r);case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}},t,this)}));return function(t,e){return r.apply(this,arguments)}}();s.modifiers[n]=function(e,r){var t=function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,o("".concat(s.name,"_").concat(e),r);case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}();s.devTool&&(t.modifierName=n),a.value["".concat(s.name,"_").concat(e)].queue.push(t),a.value["".concat(s.name,"_").concat(e)].runQueue()}}}),Object.keys(this.modifiers).forEach(function(t){s.virtualNode[t]=s.modifiers[t]})}}},{key:"reconstruct",value:function(t,e){var r;if(e.type===OBJECT)r=this.reconstructObject(t,e);else{if(e.type!==ARRAY)return e.value;r=this.reconstructArray(t,e)}return r}},{key:"reconstructObject",value:function(n,i){var o=this,s={};return Object.keys(i.value).forEach(function(t){var e=i.value[t],r=t.slice(n.length+1);e.type===OBJECT||e.type===ARRAY?s[r]=o.reconstruct(t,e):e.type===PRIMITIVE&&(s[r]=e.value)}),s}},{key:"reconstructArray",value:function(n,i){var o=this,s=[];return Object.keys(i.value).forEach(function(t,e){var r=i.value[t];r.type===ARRAY||r.type===OBJECT?s.push(o.reconstruct("".concat(n,"_").concat(e),r)):r.type===PRIMITIVE&&s.push(r.value)}),s}},{key:"getState",value:function(){if(this.type===CONTAINER)return this.virtualNode;for(var t=this.virtualNode;t.type!==CONTAINER;)t=t.parent;return t}},{key:"name",get:function(){return this._name},set:function(t){if(!t||"string"!=typeof t)throw new Error("Name is required and should be a string");this._name=t}},{key:"value",get:function(){return this._value},set:function(t){this._value=t}},{key:"modifiers",get:function(){return this._modifiers},set:function(t){if("object"!==_typeof(t)||Array.isArray(t))throw new Error("Modifiers must be a plain object");this._modifiers=t}},{key:"queue",get:function(){return this._queue},set:function(t){this._queue=t}},{key:"parent",get:function(){return this._parent},set:function(t){if(t&&"SiloNode"!==t.constructor.name)throw new Error("Parent must be null or a siloNode");this._parent=t}},{key:"subscribers",get:function(){return this._subscribers},set:function(t){this._subscribers=t}},{key:"type",get:function(){return this._type},set:function(t){if("string"!=typeof t||!types[t])throw new Error("Type must be an available constant");this._type=t}},{key:"virtualNode",get:function(){return this._virtualNode},set:function(t){this._virtualNode=t}},{key:"id",get:function(){return this._id}}]),c}(),silo={},virtualSilo={};function combineNodes(){for(var a=null,t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];if(e[0]&&!0===e[0].devTool&&(a=e[0],e.shift()),0===e.length)throw new Error("combineNodes function takes at least one constructorNode");var n={};if(e.forEach(function(t){if(!t||"ConstructorNode"!==t.constructor.name)throw new Error("Only constructorNodes can be passed to combineNodes");if(null===t.parent){if(n.root)throw new Error("Only one constructor node can have null parent");n.root=[t]}else n[t.parent]?n[t.parent].push(t):n[t.parent]=[t]}),!n.root)throw new Error("At least one constructor node must have a null parent");var i=function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"root",s=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,e="root"===t?"root":t.name;if(n[e]){var u={};return n[e].forEach(function(t){var e={};u[t.name]=new SiloNode(t.name,e,s,{},CONTAINER,a);var r=u[t.name],n=t.state;Object.keys(n).forEach(function(t){"object"===_typeof(n[t].value)?e[t]=r.deconstructObjectIntoSiloNodes(t,n[t],r,!0):(e[t]=new SiloNode(t,n[t].value,r,n[t].modifiers,PRIMITIVE,a),e[t].linkModifiers())});var i=o(t,r);i&&Object.keys(i).forEach(function(t){e[t]=i[t]})}),u}}();return Object.keys(i).forEach(function(t){silo[t]=i[t]}),forEachSiloNode(function(t){t.issueID()}),forEachSiloNode(function(t){virtualSilo[t.id]||(virtualSilo[t.id]=t.virtualNode)}),forEachSiloNode(function(i){"OBJECT"!==i.type&&"ARRAY"!==i.type||(i.modifiers.keySubscribe=function(t,e){var r=i.name+"_"+t,n=i.value[r].pushToSubscribers(e);return i.value[r].notifySubscribers(),function(){i.removeFromSubscribersAtIndex(n)}})}),silo.virtualSilo=virtualSilo,silo}function forEachSiloNode(e){Object.keys(silo).forEach(function(t){!function e(r,n){if("SiloNode"===r.constructor.name){if(n(r),r.type===PRIMITIVE)return;Object.keys(r.value).forEach(function(t){"SiloNode"===r.value[t].constructor.name&&e(r.value[t],n)})}}(silo[t],e)})}silo.subscribe=function(r,e){if(!e){if(!r.prototype)throw new Error("You can't use an anonymous function in subscribe without a name argument.");e=r.prototype.constructor.name+"State"}var n,i,t,o=[];return forEachSiloNode(function(t){t.name===e&&(i=t.pushToSubscribers(r),n=t,o.push({node:n,index:i}))}),n?(n.value&&Object.keys(n.value).forEach(function(t){var e=n.value[t];"CONTAINER"!==e.type&&(i=e.pushToSubscribers(r),o.push({node:e,index:i}))}),t=function(){var e;Object.keys(o).forEach(function(t){(e=o[t])._subscribers.splice(e.index,1)})},n.notifySubscribers(),t):(console.error(new Error("You are trying to subscribe to something that isn't in the silo.")),function(){console.error(new Error("You are trying to run unsubscribe from something that wasn't in the silo in the first place."))})};var combineState=combineNodes,StateNode=ConstructorNode;exports.combineState=combineState,exports.StateNode=StateNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9yYWRvbi9jb25zdHJ1Y3Rvck5vZGUuanMiLCIuLi9yYWRvbi9jb25zdGFudHMuanMiLCIuLi9yYWRvbi92aXJ0dWFsTm9kZS5qcyIsIi4uL3JhZG9uL3NpbG9Ob2RlLmpzIiwiLi4vcmFkb24vY29tYmluZU5vZGVzLmpzIiwiLi4vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQ29uc3RydWN0b3JOb2RlIHtcbiAgY29uc3RydWN0b3IobmFtZSwgcGFyZW50TmFtZSA9IG51bGwpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lOyBcbiAgICB0aGlzLnN0YXRlID0ge307XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnROYW1lO1xuICAgIFxuICAgIHRoaXMuaW5pdGlhbGl6ZVN0YXRlID0gdGhpcy5pbml0aWFsaXplU3RhdGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmluaXRpYWxpemVNb2RpZmllcnMgPSB0aGlzLmluaXRpYWxpemVNb2RpZmllcnMuYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHZhcmlhYmxlcyB0byB0aGUgc3RhdGVcbiAgICogQHBhcmFtIHtvYmplY3R9IGluaXRpYWxTdGF0ZSAtIEFuIG9iamVjdCB3aXRoIGtleXMgYXMgdmFyaWFibGUgbmFtZXMgYW5kIHZhbHVlcyBvZiBkYXRhXG4gICAqL1xuXG4gIGluaXRpYWxpemVTdGF0ZShpbml0aWFsU3RhdGUpIHtcbiAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgaW5wdXQgaXMgYW4gb2JqZWN0XG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSkgdGhyb3cgbmV3IEVycm9yKCdJbnB1dCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgc3RhdGUgdmFyaWFibGVzIGFuZCBjcmVhdGUgb2JqZWN0cyB0aGF0IGhvbGQgdGhlIHZhcmlhYmxlIGFuZCBhbnlcbiAgICAvLyBhc3NvY2lhdGVkIG1vZGlmaWVyc1xuICAgIE9iamVjdC5rZXlzKGluaXRpYWxTdGF0ZSkuZm9yRWFjaChuZXdWYXJpYWJsZUluU3RhdGUgPT4ge1xuICAgICAgdGhpcy5zdGF0ZVtuZXdWYXJpYWJsZUluU3RhdGVdID0ge1xuICAgICAgICB2YWx1ZTogaW5pdGlhbFN0YXRlW25ld1ZhcmlhYmxlSW5TdGF0ZV0sXG4gICAgICAgIC8vIGFjY291bnRzIGZvciBpbml0aWFsaXplTW9kaWZlcnMgYmVpbmcgY2FsbGVkIHByaW9yIHRvIGluaXRpYWxpemVTdGF0ZVxuICAgICAgICAvLyBieSBjaGVja2luZyB0byBzZWUgaWYgdGhpcyBvYmplY3QgaGFzIGFscmVhZHkgYmVlbiBjcmVhdGVkXG4gICAgICAgIG1vZGlmaWVyczogdGhpcy5zdGF0ZVtuZXdWYXJpYWJsZUluU3RhdGVdID8gdGhpcy5zdGF0ZVtuZXdWYXJpYWJsZUluU3RhdGVdLm1vZGlmaWVycyA6IHt9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3RvcmVzIG1vZGlmaWVycyBpbiBzdGF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5pdGlhbE1vZGlmaWVycyAtIEFuIG9iamVjdCB3aXRoIGtleXMgYXNzb2NpYXRlZCB3aXRoIGV4aXN0aW5nIGluaXRpYWxpemVkIHZhcmlhYmxlcyBhbmQgdmFsdWVzIHRoYXQgYXJlIG9iamVjdHMgY29udGFpbmluZyBtb2RpZmllcnMgdG8gYmUgYm91bmQgdG8gdGhhdCBzcGVjaWZpYyB2YXJpYWJsZVxuICAgKi9cbiAgXG4gIGluaXRpYWxpemVNb2RpZmllcnMoaW5pdGlhbE1vZGlmaWVycykge1xuICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHRoZSBpbnB1dCBpcyBhbiBvYmplY3RcbiAgICBpZiAodHlwZW9mIGluaXRpYWxNb2RpZmllcnMgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoaW5pdGlhbE1vZGlmaWVycykpIHRocm93IG5ldyBFcnJvcignSW5wdXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICAvLyBsb29wcyB0aHJvdWdoIHRoZSBzdGF0ZSBtb2RpZmllcnMuIFRoZSBzYW1lIG9iamVjdCBpcyBjcmVhdGVkIGhlcmUgYXMgaW4gaW5pdGlhbGl6ZVN0YXRlIGFuZCBpdFxuICAgIC8vIHdpbGwgb3ZlcndyaXRlIHRoZSBpbml0aWFsaXplU3RhdGUgb2JqZWN0LiBCdXQgaXQgbmVlZHMgdG8gYmUgZG9uZSB0aGlzIHdheSBpbiBjYXNlIHRoZSBkZXYgY2FsbHMgXG4gICAgLy8gaW5pdGlhbGl6ZU1vZGlmaWVycyBiZWZvcmUgdGhleSBjYWxsIGluaXRpYWxpemVTdGF0ZS4gTm93IGl0IHdvcmtzIGVpdGhlciB3YXkgXG4gICAgT2JqZWN0LmtleXMoaW5pdGlhbE1vZGlmaWVycykuZm9yRWFjaChuZXdNb2RpZmllcnNJblN0YXRlID0+IHtcbiAgICAgIHRoaXMuc3RhdGVbbmV3TW9kaWZpZXJzSW5TdGF0ZV0gPSB7XG4gICAgICAgIC8vIGFjY291bnRzIGZvciBpbml0aWFsaXplU3RhdGUgYmVpbmcgY2FsbGVkIHByaW9yIHRvIGluaXRpYWxpemVNb2RpZmllcnMuIFxuICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZVtuZXdNb2RpZmllcnNJblN0YXRlXSA/IHRoaXMuc3RhdGVbbmV3TW9kaWZpZXJzSW5TdGF0ZV0udmFsdWUgOiBudWxsLFxuICAgICAgICBtb2RpZmllcnM6IGluaXRpYWxNb2RpZmllcnNbbmV3TW9kaWZpZXJzSW5TdGF0ZV1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldCBuYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoJ05hbWUgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgIGVsc2UgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIH1cblxuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgfVxuXG4gIHNldCBwYXJlbnQocGFyZW50KSB7XG4gICAgaWYgKHR5cGVvZiBwYXJlbnQgIT09ICdzdHJpbmcnICYmIHBhcmVudCAhPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCdQYXJlbnQgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgIGVsc2UgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB9XG5cbiAgZ2V0IHBhcmVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFyZW50O1xuICB9XG5cbiAgc2V0IHN0YXRlKHN0YXRlKSB7XG4gICAgdGhpcy5fc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIGdldCBzdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29uc3RydWN0b3JOb2RlOyIsImV4cG9ydCBjb25zdCBBUlJBWSA9ICdBUlJBWSc7XG5leHBvcnQgY29uc3QgT0JKRUNUID0gJ09CSkVDVCc7XG5leHBvcnQgY29uc3QgUFJJTUlUSVZFID0gJ1BSSU1JVElWRSc7XG5leHBvcnQgY29uc3QgQ09OVEFJTkVSID0gJ0NPTlRBSU5FUic7IiwiaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi9jb25zdGFudHMnXG5cbmNsYXNzIFZpcnR1YWxOb2RlIHtcbiAgY29uc3RydWN0b3IgKG5vZGUsIG1vZGlmaWVycykge1xuICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICB0aGlzLnBhcmVudHMgPSB7fTtcbiAgICBpZiAobm9kZS5wYXJlbnQpe1xuICAgICAgICAgIFxuICAgICAgdGhpcy5wYXJlbnQgPSBub2RlLnBhcmVudC52aXJ0dWFsTm9kZTtcbiAgICAgIHRoaXMucGFyZW50c1t0aGlzLnBhcmVudC5uYW1lXSA9IHRoaXMucGFyZW50O1xuICAgICAgbGV0IGFuY2VzdG9yID0gdGhpcy5wYXJlbnQ7XG4gICAgICBcbiAgICAgIHdoaWxlKGFuY2VzdG9yLnBhcmVudCAhPT0gbnVsbCl7XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgICB0aGlzLnBhcmVudHNbYW5jZXN0b3IubmFtZV0gPSBhbmNlc3RvcjtcbiAgICAgIH1cbiAgICB9IFxuXG4gICAgdGhpcy5uYW1lID0gbm9kZS5uYW1lO1xuICAgIHRoaXMudHlwZSA9IG5vZGUudHlwZTtcbiAgICB0aGlzLmlkID0gbm9kZS5pZDtcblxuICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLlBSSU1JVElWRSl7XG4gICAgICAvL3ZhbHVlIHNob3VsZCBqdXN0IGJlIGFuIGVtcHR5IG9iamVjdC5cbiAgICAgIC8vd2hlbiB5b3VyIGNoaWxkcmVuIGFyZSBiZWluZyBtYWRlXG4gICAgICAvL3RoZXknbGwganVzdCBwdXQgdGhlbXNlbHZlcyBpbnRvIHlvdXIgdmFsdWUuXG4gICAgICB0aGlzLnZhbCA9IG5vZGUudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsID0ge307XG4gICAgICBpZih0aGlzLnR5cGUgPT09IHR5cGVzLkFSUkFZKXsgdGhpcy52YWwgPSBbXSB9IFxuICAgIH0gXG5cbiAgICBpZiAobm9kZS50eXBlICE9PSB0eXBlcy5DT05UQUlORVIpe1xuICAgICAgbGV0IG5hbWUgPSBub2RlLm5hbWU7XG4gICAgICBpZihuYW1lLmluY2x1ZGVzKCdfJykpIG5hbWUgPSBuYW1lLnNwbGl0KCdfJylbbmFtZS5zcGxpdCgnXycpLmxlbmd0aCAtIDFdO1xuXG4gICAgICBub2RlLnBhcmVudC52aXJ0dWFsTm9kZS52YWxbbmFtZV0gPSB0aGlzO1xuICAgICAgaWYodGhpcy5wYXJlbnQudHlwZSA9PT0gdHlwZXMuQ09OVEFJTkVSKXtcbiAgICAgICAgdGhpcy5wYXJlbnRbbmFtZV0gPSB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlLm1vZGlmaWVycyl7XG4gICAgICBsZXQgbW9kaWZpZXJLZXlzID0gT2JqZWN0LmtleXMobW9kaWZpZXJzKTtcbiAgICAgIG1vZGlmaWVyS2V5cy5mb3JFYWNoKG1vZGlmaWVyS2V5ID0+IHtcbiAgICAgICAgdGhpc1ttb2RpZmllcktleV0gPSBtb2RpZmllcnNbbW9kaWZpZXJLZXldO1xuICAgICAgfSlcbiAgICB9XG5cbiAgfSAgIFxuICB1cGRhdGVUbyhkYXRhKXtcbiAgICB0aGlzLnZhbCA9IGRhdGE7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmlydHVhbE5vZGU7XG4iLCJpbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgVmlydHVhbE5vZGUgZnJvbSAnLi92aXJ0dWFsTm9kZS5qcydcblxuXG5jbGFzcyBTaWxvTm9kZSB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHZhbHVlLCBwYXJlbnQgPSBudWxsLCBtb2RpZmllcnMgPSB7fSwgdHlwZSA9IHR5cGVzLlBSSU1JVElWRSwgZGV2VG9vbCA9IG51bGwpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm1vZGlmaWVycyA9IG1vZGlmaWVycztcbiAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50OyAvLyBjaXJjdWxhciBzaWxvIG5vZGVcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuZGV2VG9vbCA9IGRldlRvb2w7XG5cbiAgICAvLyBiaW5kXG4gICAgdGhpcy5saW5rTW9kaWZpZXJzID0gdGhpcy5saW5rTW9kaWZpZXJzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5ydW5Nb2RpZmllcnMgPSB0aGlzLnJ1bk1vZGlmaWVycy5iaW5kKHRoaXMpO1xuICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMgPSB0aGlzLm5vdGlmeVN1YnNjcmliZXJzLmJpbmQodGhpcyk7IFxuICAgIHRoaXMuZ2V0U3RhdGUgPSB0aGlzLmdldFN0YXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWNvbnN0cnVjdEFycmF5ID0gdGhpcy5yZWNvbnN0cnVjdEFycmF5LmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWNvbnN0cnVjdE9iamVjdCA9IHRoaXMucmVjb25zdHJ1Y3RPYmplY3QuYmluZCh0aGlzKTtcbiAgICB0aGlzLmRlY29uc3RydWN0T2JqZWN0SW50b1NpbG9Ob2RlcyA9IHRoaXMuZGVjb25zdHJ1Y3RPYmplY3RJbnRvU2lsb05vZGVzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWNvbnN0cnVjdCA9IHRoaXMucmVjb25zdHJ1Y3QuYmluZCh0aGlzKTtcbiAgICB0aGlzLnB1c2hUb1N1YnNjcmliZXJzID0gdGhpcy5wdXNoVG9TdWJzY3JpYmVycy5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVtb3ZlRnJvbVN1YnNjcmliZXJzQXRJbmRleCA9IHRoaXMucmVtb3ZlRnJvbVN1YnNjcmliZXJzQXRJbmRleCh0aGlzKTtcbiAgICBcbiAgICAvLyBpbnZva2UgZnVuY3Rpb25zXG4gICAgdGhpcy5ydW5RdWV1ZSA9IHRoaXMucnVuTW9kaWZpZXJzKCk7XG4gICAgXG4gICAgaWYodGhpcy50eXBlID09PSAnQVJSQVknIHx8IHRoaXMudHlwZSA9PT0gJ09CSkVDVCcpe1xuICAgICAgdGhpcy5tb2RpZmllcnMua2V5U3Vic2NyaWJlID0gKGtleSwgcmVuZGVyRnVuY3Rpb24pID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMubmFtZSArICdfJyArIGtleTtcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLnZhbHVlW25hbWVdXG4gICAgICAgIGNvbnN0IHN1YnNjcmliZWRBdEluZGV4ID0gbm9kZS5wdXNoVG9TdWJzY3JpYmVycyhyZW5kZXJGdW5jdGlvbik7XG4gICAgICAgIG5vZGUubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtub2RlLl9zdWJzY3JpYmVycy5zcGxpY2Uoc3Vic2NyaWJlZEF0SW5kZXgsIDEpfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICB0aGlzLmlkO1xuICAgIHRoaXMuaXNzdWVJRCgpO1xuICAgIHRoaXMudmlydHVhbE5vZGUgPSBuZXcgVmlydHVhbE5vZGUodGhpcywgdGhpcy5tb2RpZmllcnMpO1xuICB9XG5cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gIH1cblxuICBzZXQgbmFtZShuYW1lKSB7XG4gICAgaWYgKCFuYW1lIHx8IHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKCdOYW1lIGlzIHJlcXVpcmVkIGFuZCBzaG91bGQgYmUgYSBzdHJpbmcnKVxuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbW9kaWZpZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl9tb2RpZmllcnM7XG4gIH1cblxuICBzZXQgbW9kaWZpZXJzKG1vZGlmaWVycykge1xuICAgIGlmICh0eXBlb2YgbW9kaWZpZXJzICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1vZGlmaWVycykpIHRocm93IG5ldyBFcnJvcignTW9kaWZpZXJzIG11c3QgYmUgYSBwbGFpbiBvYmplY3QnKTtcbiAgICB0aGlzLl9tb2RpZmllcnMgPSBtb2RpZmllcnM7XG4gIH1cblxuICBnZXQgcXVldWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3F1ZXVlO1xuICB9XG5cbiAgc2V0IHF1ZXVlKHF1ZXVlKSB7XG4gICAgdGhpcy5fcXVldWUgPSBxdWV1ZTtcbiAgfVxuXG4gIGdldCBwYXJlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudDtcbiAgfVxuXG4gIHNldCBwYXJlbnQocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuY29uc3RydWN0b3IubmFtZSAhPT0gJ1NpbG9Ob2RlJykgdGhyb3cgbmV3IEVycm9yKCdQYXJlbnQgbXVzdCBiZSBudWxsIG9yIGEgc2lsb05vZGUnKTtcbiAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIH1cblxuICBnZXQgc3Vic2NyaWJlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZXJzO1xuICB9XG5cbiAgc2V0IHN1YnNjcmliZXJzKHN1YnNjcmliZXJzKSB7XG4gICAgdGhpcy5fc3Vic2NyaWJlcnMgPSBzdWJzY3JpYmVycztcbiAgfVxuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgc2V0IHR5cGUodHlwZSkge1xuICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycgfHwgIXR5cGVzW3R5cGVdKSB0aHJvdyBuZXcgRXJyb3IoJ1R5cGUgbXVzdCBiZSBhbiBhdmFpbGFibGUgY29uc3RhbnQnKTtcbiAgICB0aGlzLl90eXBlID0gdHlwZTtcbiAgfVxuXG4gIGdldCB2aXJ0dWFsTm9kZSgpe1xuICAgIHJldHVybiB0aGlzLl92aXJ0dWFsTm9kZVxuICB9XG5cbiAgc2V0IHZpcnR1YWxOb2RlKHZpcnR1YWxOb2RlKXtcbiAgICB0aGlzLl92aXJ0dWFsTm9kZSA9IHZpcnR1YWxOb2RlO1xuICB9XG5cbiAgZ2V0IGlkKCl7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG5cbiBcblxuICBwdXNoVG9TdWJzY3JpYmVycyhyZW5kZXJGdW5jdGlvbil7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5wdXNoKHJlbmRlckZ1bmN0aW9uKTtcbiAgfVxuXG4gIHJlbW92ZUZyb21TdWJzY3JpYmVyc0F0SW5kZXgoaW5kZXgpe1xuICAgIHRoaXMuc3ViY3JpYmVycyA9IHRoaXMuc3Vic2NyaWJlcnMuc2xpY2UoaW5kZXgsIDEpO1xuICB9XG5cbiAgLy90aGVyZSdzIG5vIHNldHRlciBmb3IgdGhlIElEIGJlY2F1c2UgeW91IGNhbnQgc2V0IGl0IGRpcmVjdGx5LiB5b3UgaGF2ZSB0byB1c2UgaXNzdWVJRFxuXG4gIC8vaXNzdWVJRCBNVVNUIEJFIENBTExFRCBPTiBUSEUgTk9ERVMgSU4gT1JERVIgUk9PVCBUTyBMRUFGLiBpdCBhbHdheXMgYXNzdW1lcyB0aGF0IHRoaXMgbm9kZSdzIHBhcmVudCB3aWxsXG4gIC8vaGF2ZSBoYWQgaXNzdWVJRCBjYWxsZWQgb24gaXQgYmVmb3JlLiB1c2UgYXBwbHlUb1NpbG8gdG8gbWFrZSBzdXJlIGl0IHJ1bnMgaW4gdGhlIHJpZ2h0IG9yZGVyXG4gIGlzc3VlSUQoKXtcbiAgICBpZih0aGlzLnBhcmVudCA9PT0gbnVsbCl7IC8vaXRzIHRoZSByb290IG5vZGVcbiAgICAgIHRoaXMuX2lkID0gdGhpcy5uYW1lO1xuICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgLy9pdHMgbm90IHRoZSByb290IG5vZGVcbiAgICAgIHRoaXMuX2lkID0gdGhpcy5wYXJlbnQuaWQgKyAnLicgKyB0aGlzLm5hbWU7XG4gICAgfVxuICB9XG5cbiAgbm90aWZ5U3Vic2NyaWJlcnMoKSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgLy8gc3Vic2NyaWJlcnMgaXMgYW4gYXJyYXkgb2YgZnVuY3Rpb25zIHRoYXQgbm90aWZ5IHN1YnNjcmliZWQgY29tcG9uZW50cyBvZiBzdGF0ZSBjaGFuZ2VzXG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ1N1YnNjcmliZXIgYXJyYXkgbXVzdCBvbmx5IGNvbnRhaW4gZnVuY3Rpb25zJyk7XG4gICAgICAvLyBwYXNzIHRoZSB1cGRhdGVkIHN0YXRlIGludG8gdGhlIHN1YnNjcmliZSBmdW5jdGlvbnMgdG8gdHJpZ2dlciByZS1yZW5kZXJzIG9uIHRoZSBmcm9udGVuZCBcbiAgICAgIGZ1bmModGhpcy5nZXRTdGF0ZSgpKTtcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgb25jZSBpbiB0aGUgc2lsb05vZGUgY29uc3RydWN0b3IgdG8gY3JlYXRlIGEgY2xvc3VyZS4gVGhlIGNsb3N1cmUgdmFyaWFibGUgXG4gICAqICdydW5uaW5nJyBwcmV2ZW50cyB0aGUgcmV0dXJuZWQgYXN5bmMgZnVuY3Rpb24gZnJvbSBiZWluZyBpbnZva2VkIGlmIGl0J3NcbiAgICogc3RpbGwgcnVubmluZyBmcm9tIGEgcHJldmlvdXMgY2FsbFxuICAgKi9cbiAgcnVuTW9kaWZpZXJzKCkge1xuICAgIGxldCBydW5uaW5nID0gZmFsc2U7IC8vIHByZXZlbnRzIG11bHRpcGxlIGNhbGxzIGZyb20gYmVpbmcgbWFkZSBpZiBzZXQgdG8gZmFsc2VcblxuICAgIGFzeW5jIGZ1bmN0aW9uIHJ1bigpIHtcbiAgICAgIGlmIChydW5uaW5nID09PSBmYWxzZSkgeyAvLyBwcmV2ZW50cyBtdWx0aXBsZSBjYWxscyBmcm9tIGJlaW5nIG1hZGUgaWYgYWxyZWFkeSBydW5uaW5nXG4gICAgICAgIHJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICAvLyBydW5zIHRocm91Z2ggYW55IG1vZGlmaWVycyB0aGF0IGhhdmUgYmVlbiBhZGRlZCB0byB0aGUgcXVldWVcbiAgICAgICAgd2hpbGUgKHRoaXMucXVldWUubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgLy8gZW5mb3JjZXMgdGhhdCB3ZSBhbHdheXMgd2FpdCBmb3IgYSBtb2RpZmllciB0byBmaW5pc2ggYmVmb3JlIHByb2NlZWRpbmcgdG8gdGhlIG5leHRcbiAgICAgICAgICBsZXQgbmV4dE1vZGlmaWVyID0gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgIGxldCBwcmV2aW91c1N0YXRlID0gbnVsbDtcbiAgICAgICAgICBpZih0aGlzLmRldlRvb2wpIHtcbiAgICAgICAgICAgIGlmKHRoaXMudHlwZSAhPT0gdHlwZXMuUFJJTUlUSVZFKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzU3RhdGUgPSB0aGlzLnJlY29uc3RydWN0KHRoaXMubmFtZSwgdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwcmV2aW91c1N0YXRlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy52YWx1ZSA9IGF3YWl0IG5leHRNb2RpZmllcigpO1xuICAgICAgICAgIGlmKHRoaXMuZGV2VG9vbCkge1xuICAgICAgICAgICAgdGhpcy5kZXZUb29sLm5vdGlmeShwcmV2aW91c1N0YXRlLCB0aGlzLnZhbHVlLCB0aGlzLm5hbWUsIG5leHRNb2RpZmllci5tb2RpZmllck5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnZpcnR1YWxOb2RlLnVwZGF0ZVRvKHRoaXMudmFsdWUpO1xuICAgICAgICAgIGlmICh0aGlzLnR5cGUgIT09IHR5cGVzLlBSSU1JVElWRSkgdGhpcy52YWx1ZSA9IHRoaXMuZGVjb25zdHJ1Y3RPYmplY3RJbnRvU2lsb05vZGVzKCkudmFsdWU7XG4gICAgICAgICAgXG4gICAgICAgICAgdGhpcy5ub3RpZnlTdWJzY3JpYmVycygpO1xuICAgICAgICB9XG4gICAgICAgIHJ1bm5pbmcgPSBmYWxzZTsgICBcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcnVuO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29uc3RydWN0cyBvYmplY3RzIGludG8gYSBwYXJlbnQgc2lsb05vZGUgd2l0aCBhIHR5cGUgb2Ygb2JqZWN0L2FycmF5LCBhbmRcbiAgICogY2hpbGRyZW4gc2lsb05vZGVzIHdpdGggdmFsdWVzIHBlcnRhaW5pbmcgdG8gdGhlIGNvbnRlbnRzIG9mIHRoZSBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9iak5hbWUgLSBUaGUgaW50ZW5kZWQga2V5IG9mIHRoZSBvYmplY3Qgd2hlbiBzdG9yZWQgaW4gdGhlIHNpbG9cbiAgICogQHBhcmFtIHtvYmplY3R9IG9iamVjdFRvRGVjb25zdHJ1Y3QgLSBBbnkgb2JqZWN0IHRoYXQgbXVzdCBjb250YWluIGEga2V5IG9mIHZhbHVlXG4gICAqIEBwYXJhbSB7U2lsb05vZGV9IHBhcmVudCAtIEludGVuZGVkIFNpbG9Ob2RlIHBhcmVudCB0byB0aGUgZGVjb25zdHJ1Y3RlZCBvYmplY3RcbiAgICogQHBhcmFtIHtib29sZWFufSBydW5MaW5rZWRNb2RzIC0gVHJ1ZSBvbmx5IHdoZW4gYmVpbmcgY2FsbGVkIGZvciBhIGNvbnN0cnVjdG9yTm9kZVxuICAgKi9cbiAgZGVjb25zdHJ1Y3RPYmplY3RJbnRvU2lsb05vZGVzKG9iak5hbWUgPSB0aGlzLm5hbWUsIG9iamVjdFRvRGVjb25zdHJ1Y3QgPSB0aGlzLCBwYXJlbnQgPSB0aGlzLnBhcmVudCwgcnVuTGlua2VkTW9kcyA9IGZhbHNlKSB7XG4gICAgY29uc3Qgb2JqQ2hpbGRyZW4gPSB7fTtcbiAgICBsZXQgdHlwZSwga2V5cztcbiAgXG4gICAgLy8gZGV0ZXJtaW5lIGlmIHRoZSBvYmplY3RUb0RlY29uc3RydWN0IGlzIGFuIGFycmF5IG9yIHBsYWluIG9iamVjdFxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdFRvRGVjb25zdHJ1Y3QudmFsdWUpKSB7XG4gICAgICBrZXlzID0gb2JqZWN0VG9EZWNvbnN0cnVjdC52YWx1ZTtcbiAgICAgIHR5cGUgPSB0eXBlcy5BUlJBWTtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdFRvRGVjb25zdHJ1Y3QudmFsdWUpO1xuICAgICAgdHlwZSA9IHR5cGVzLk9CSkVDVDtcbiAgICB9XG4gICAgXG4gICAgLy8gYSBzaWxvbm9kZSBtdXN0IGJlIGNyZWF0ZWQgYmVmb3JlIGl0cyBjaGlsZHJlbiBhcmUgbWFkZSwgYmVjYXVzZSB0aGUgY2hpbGRyZW4gbmVlZCB0byBoYXZlXG4gICAgLy8gdGhpcyBleGFjdCBzaWxvbm9kZSBwYXNzZWQgaW50byB0aGVtIGFzIGEgcGFyZW50LCBoZW5jZSBvYmpDaGlsZHJlbiBpcyBjdXJyZW50bHkgZW1wdHlcbiAgICBjb25zdCBuZXdTaWxvTm9kZSA9IG5ldyBTaWxvTm9kZShvYmpOYW1lLCBvYmpDaGlsZHJlbiwgcGFyZW50LCBvYmplY3RUb0RlY29uc3RydWN0Lm1vZGlmaWVycywgdHlwZSwgdGhpcy5kZXZUb29sKTtcbiAgICBcbiAgICAvLyBmb3IgYXJyYXlzIG9ubHlcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3RUb0RlY29uc3RydWN0LnZhbHVlKSAmJiBvYmplY3RUb0RlY29uc3RydWN0LnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgdmFsdWVzIGluIHRoZSBvYmplY3RUb0RlY29uc3RydWN0IHRvIGNyZWF0ZSBzaWxvTm9kZXMgZm9yIGVhY2ggb2YgdGhlbVxuICAgICAgb2JqZWN0VG9EZWNvbnN0cnVjdC52YWx1ZS5mb3JFYWNoKChpbmRleGVkVmFsLCBpKSA9PiB7XG4gICAgICAgIC8vIHJlY3Vyc2UgaWYgdGhlIGFycmF5IGhhcyBvYmplY3RzIHN0b3JlZCBpbiBpdHMgaW5kaWNlcyB0aGF0IG5lZWQgZnVydGhlciBkZWNvbnN0cnVjdGluZ1xuICAgICAgICBpZiAodHlwZW9mIGluZGV4ZWRWYWwgPT09ICdvYmplY3QnKSBvYmpDaGlsZHJlbltgJHtvYmpOYW1lfV8ke2l9YF0gPSB0aGlzLmRlY29uc3RydWN0T2JqZWN0SW50b1NpbG9Ob2RlcyhgJHtvYmpOYW1lfV8ke2l9YCwge3ZhbHVlOiBpbmRleGVkVmFsfSwgbmV3U2lsb05vZGUsIHJ1bkxpbmtlZE1vZHMpO1xuICAgICAgICAvLyBvdGhlcndpc2UgZm9yIHByaW1pdGl2ZXMgd2UgY2FuIGdvIHN0cmFpZ2h0IHRvIGNyZWF0aW5nIGEgbmV3IHNpbG9Ob2RlXG4gICAgICAgIC8vIHRoZSBuYW1pbmcgY29udmVudGlvbiBmb3Iga2V5cyBpbnZvbHZlcyBhZGRpbmcgJ19pJyB0byB0aGUgb2JqZWN0IG5hbWVcbiAgICAgICAgZWxzZSBvYmpDaGlsZHJlbltgJHtvYmpOYW1lfV8ke2l9YF0gPSBuZXcgU2lsb05vZGUoYCR7b2JqTmFtZX1fJHtpfWAsIGluZGV4ZWRWYWwsIG5ld1NpbG9Ob2RlLCB7fSwgdHlwZXMuUFJJTUlUSVZFLCB0aGlzLmRldlRvb2wpO1xuICAgICAgfSlcbiAgICB9IFxuICAgIFxuICAgIC8vIGZvciBwbGFpbiBvYmplY3RzXG4gICAgZWxzZSBpZiAoa2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGtleS92YWx1ZSBwYWlycyBpbiB0aGUgb2JqZWN0VG9EZWNvbnN0cnVjdCB0byBjcmVhdGUgc2lsb05vZGVzIGZvciBlYWNoIG9mIHRoZW1cbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAvLyByZWN1cnNlIGlmIHRoZSBvYmplY3QgaGFzIG9iamVjdHMgc3RvcmVkIGluIGl0cyB2YWx1ZXMgdGhhdCBuZWVkIGZ1cnRoZXIgZGVjb25zdHJ1Y3RpbmdcbiAgICAgICAgaWYgKHR5cGVvZiBvYmplY3RUb0RlY29uc3RydWN0LnZhbHVlW2tleV0gPT09ICdvYmplY3QnKSBvYmpDaGlsZHJlbltgJHtvYmpOYW1lfV8ke2tleX1gXSA9IHRoaXMuZGVjb25zdHJ1Y3RPYmplY3RJbnRvU2lsb05vZGVzKGAke29iak5hbWV9XyR7a2V5fWAsIHt2YWx1ZTogb2JqZWN0VG9EZWNvbnN0cnVjdC52YWx1ZVtrZXldfSwgbmV3U2lsb05vZGUsIHJ1bkxpbmtlZE1vZHMpO1xuICAgICAgICAvLyBvdGhlcndpc2UgZm9yIHByaW1pdGl2ZXMgd2UgY2FuIGdvIHN0cmFpZ2h0IHRvIGNyZWF0aW5nIGEgbmV3IHNpbG9Ob2RlXG4gICAgICAgIC8vIHRoZSBuYW1pbmcgY29udmVudGlvbiBmb3Iga2V5cyBpbnZvbHZlcyBhZGRpbmcgJ19rZXknIHRvIHRoZSBvYmplY3QgbmFtZSBcbiAgICAgICAgZWxzZSBvYmpDaGlsZHJlbltgJHtvYmpOYW1lfV8ke2tleX1gXSA9IG5ldyBTaWxvTm9kZShgJHtvYmpOYW1lfV8ke2tleX1gLCBvYmplY3RUb0RlY29uc3RydWN0LnZhbHVlW2tleV0sIG5ld1NpbG9Ob2RlLCB7fSwgdHlwZXMuUFJJTUlUSVZFLCB0aGlzLmRldlRvb2wpO1xuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBsaW5rTW9kaWZpZXJzIHNob3VsZCBvbmx5IGJlIHJ1biBpZiBhIGNvbnN0cnVjdG9yTm9kZSBoYXMgYmVlbiBwYXNzZWQgaW50byB0aGlzIGZ1bmN0aW9uXG4gICAgLy8gYmVjYXVzZSB0aGF0IG1lYW5zIHRoYXQgdGhlIHNpbG8gaXMgYmVpbmcgY3JlYXRlZCBmb3IgdGhlIGZpcnN0IHRpbWUgYW5kIHRoZSBtb2RpZmllcnMgbmVlZFxuICAgIC8vIHRvIGJlIHdyYXBwZWQuIEZvciBkZWNvbnN0cnVjdGVkIG9iamVjdHMgYXQgcnVudGltZSwgd3JhcHBpbmcgaXMgbm90IHJlcXVpcmVkXG4gICAgaWYgKHJ1bkxpbmtlZE1vZHMpIG5ld1NpbG9Ob2RlLmxpbmtNb2RpZmllcnMoKTtcblxuICAgIHJldHVybiBuZXdTaWxvTm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcmFwcyBkZXZlbG9wZXIgd3JpdHRlbiBtb2RpZmllcnMgaW4gYXN5bmMgZnVuY3Rpb25zIHdpdGggc3RhdGUgcGFzc2VkIGluIGF1dG9tYXRpY2FsbHlcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5vZGVOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHNpbG9Ob2RlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZU1vZGlmaWVycyAtIEFuIG9iamVjdCBjb250YWluaW5nIHVud3JhcHBlZCBtb2RpZmllcnMgbW9zdCBsaWtlbHkgZnJvbSB0aGUgY29uc3RydWN0b3JOb2RlXG4gICAqL1xuICBsaW5rTW9kaWZpZXJzKG5vZGVOYW1lID0gdGhpcy5uYW1lLCBzdGF0ZU1vZGlmaWVycyA9IHRoaXMubW9kaWZpZXJzKSB7XG4gICAgaWYgKCFzdGF0ZU1vZGlmaWVycyB8fCBPYmplY3Qua2V5cyhzdGF0ZU1vZGlmaWVycykubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG5cbiAgICAvLyBsb29wcyB0aHJvdWdoIGV2ZXJ5IG1vZGlmaWVyIGNyZWF0ZWQgYnkgdGhlIGRldlxuICAgIE9iamVjdC5rZXlzKHN0YXRlTW9kaWZpZXJzKS5mb3JFYWNoKG1vZGlmaWVyS2V5ID0+IHtcblxuICAgICAgLy8gcmVuYW1lZCBmb3IgY29udmVuaWVuY2VcbiAgICAgIGNvbnN0IG1vZGlmaWVyID0gc3RhdGVNb2RpZmllcnNbbW9kaWZpZXJLZXldO1xuICAgICAgaWYgKHR5cGVvZiBtb2RpZmllciAhPT0gJ2Z1bmN0aW9uJyApIHRocm93IG5ldyBFcnJvcignQWxsIG1vZGlmaWVycyBtdXN0IGJlIGZ1bmN0aW9ucycpOyBcblxuICAgICAgLy8gbW9kaWZpZXJzIHdpdGggYXJndW1lbnQgbGVuZ3RocyBvZiAyIG9yIGxlc3MgYXJlIG1lYW50IHRvIGVkaXQgcHJpbWl0aXZlIHZhbHVlc1xuICAgICAgLy8gT1IgYXJyYXlzL29iamVjdHMgaW4gdGhlaXIgZW50aXJldHkgKG5vdCBzcGVjaWZpYyBpbmRpY2VzKVxuICAgICAgZWxzZSBpZiAobW9kaWZpZXIubGVuZ3RoIDw9IDIpIHtcbiAgICAgICAgLy8gdGhlIGRldidzIG1vZGlmaWVyIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHdyYXBwZWQgaW4gYW5vdGhlciBmdW5jdGlvbiBzbyB3ZSBjYW4gcGFzcyBcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgc3RhdGUgdmFsdWUgaW50byB0aGUgJ2N1cnJlbnQnIHBhcmFtZXRlclxuICAgICAgICBsZXQgbGlua2VkTW9kaWZpZXI7XG4gICAgICAgIC8vIGZvciBwcmltaXRpdmVzIHdlIGNhbiBwYXNzIHRoZSB2YWx1ZSBzdHJhaWdodCBpbnRvIHRoZSBtb2RpZmllclxuICAgICAgICBpZiAodGhhdC50eXBlID09PSB0eXBlcy5QUklNSVRJVkUpIGxpbmtlZE1vZGlmaWVyID0gYXN5bmMgKHBheWxvYWQpID0+IGF3YWl0IG1vZGlmaWVyKHRoYXQudmFsdWUsIHBheWxvYWQpO1xuICAgICAgICAvLyBmb3Igb2JqZWN0cyB3ZSBuZWVkIHRvIHJlY29uc3RydWN0IHRoZSBvYmplY3QgYmVmb3JlIGl0IGlzIHBhc3NlZCBpbnRvIHRoZSBtb2RpZmllclxuICAgICAgICBlbHNlIGlmICh0aGF0LnR5cGUgPT09IHR5cGVzLk9CSkVDVCB8fCB0aGF0LnR5cGUgPT09IHR5cGVzLkFSUkFZKSB7XG4gICAgICAgICAgbGlua2VkTW9kaWZpZXIgPSBhc3luYyAocGF5bG9hZCkgPT4gYXdhaXQgbW9kaWZpZXIodGhpcy5yZWNvbnN0cnVjdChub2RlTmFtZSwgdGhhdCksIHBheWxvYWQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyB0aGUgbGlua2VkTW9kaWZpZXIgZnVuY3Rpb24gd2lsbCBiZSB3cmFwcGVkIGluIG9uZSBtb3JlIGZ1bmN0aW9uLiBUaGlzIGZpbmFsIGZ1bmN0aW9uIGlzIHdoYXRcbiAgICAgICAgLy8gd2lsbCBiZSByZXR1cm5lZCB0byB0aGUgZGV2ZWxvcGVyXG4gICAgICAgIC8vIHRoaXMgZnVuY3Rpb24gYWRkcyB0aGUgbGlua2VkTW9kaWZpZXIgZnVuY3Rpb24gdG8gdGhlIGFzeW5jIHF1ZXVlIHdpdGggdGhlIHBheWxvYWQgcGFzc2VkIGluIGFzXG4gICAgICAgIC8vIHRoZSBvbmx5IHBhcmFtZXRlci4gQWZ0ZXJ3YXJkIHRoZSBxdWV1ZSBpcyBpbnZva2VkIHdoaWNoIHdpbGwgYmVnaW4gbW92aW5nIHRocm91Z2ggdGhlIFxuICAgICAgICAvLyBsaXN0IG9mIG1vZGlmaWVyc1xuICAgICAgICB0aGlzLm1vZGlmaWVyc1ttb2RpZmllcktleV0gPSBwYXlsb2FkID0+IHtcbiAgICAgICAgICAvLyB3cmFwIHRoZSBsaW5rZWRNb2RpZmllciBhZ2FpbiBzbyB0aGF0IGl0IGNhbiBiZSBhZGRlZCB0byB0aGUgYXN5bmMgcXVldWUgd2l0aG91dCBiZWluZyBpbnZva2VkXG4gICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBhc3luYyAoKSA9PiBhd2FpdCBsaW5rZWRNb2RpZmllcihwYXlsb2FkKTtcbiAgICAgICAgICBpZih0aGlzLmRldlRvb2wpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLm1vZGlmaWVyTmFtZSA9IG1vZGlmaWVyS2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGF0LnF1ZXVlLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgIHRoYXQucnVuUXVldWUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBtb2RpZmllcnMgd2l0aCBhcmd1bWVudCBsZW5ndGhzIG9mIG1vcmUgdGhhbiAyIGFyZSBtZWFudCB0byBlZGl0IHNwZWNpZmljIGluZGljZXMgb3JcbiAgICAgIC8vIGtleS92YWx1ZSBwYWlycyBvZiBvYmplY3RzIE9OTFlcbiAgICAgIGVsc2UgaWYgKG1vZGlmaWVyLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgLy8gdGhlIGRldidzIG1vZGlmaWVyIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHdyYXBwZWQgaW4gYW5vdGhlciBmdW5jdGlvbiBzbyB3ZSBjYW4gcGFzcyBcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgc3RhdGUgdmFsdWUgaW50byB0aGUgJ2N1cnJlbnQnIHBhcmFtZXRlclxuICAgICAgICAvLyByZWNvbnN0cnVjdCB3aWxsIHJlYXNzZW1ibGUgb2JqZWN0cyBidXQgd2lsbCBzaW1wbHkgcmV0dXJuIGlmIGEgcHJpbWl0aXZlIGlzIHBhc3NlZCBpblxuICAgICAgICBjb25zdCBsaW5rZWRNb2RpZmllciA9IGFzeW5jIChpbmRleCwgcGF5bG9hZCkgPT4gYXdhaXQgbW9kaWZpZXIodGhpcy5yZWNvbnN0cnVjdChpbmRleCwgdGhhdC52YWx1ZVtpbmRleF0pLCBpbmRleCwgcGF5bG9hZCk7IFxuXG4gICAgICAgIC8vIHRoZSBsaW5rZWRNb2RpZmllciBmdW5jdGlvbiB3aWxsIGJlIHdyYXBwZWQgaW4gb25lIG1vcmUgZnVuY3Rpb24uIFRoaXMgZmluYWwgZnVuY3Rpb24gaXMgd2hhdFxuICAgICAgICAvLyB3aWxsIGJlIHJldHVybmVkIHRvIHRoZSBkZXZlbG9wZXJcbiAgICAgICAgLy8gdGhpcyBmdW5jdGlvbiBhZGRzIHRoZSBsaW5rZWRNb2RpZmllciBmdW5jdGlvbiB0byB0aGUgYXN5bmMgcXVldWUgd2l0aCB0aGUgcGF5bG9hZCBwYXNzZWQgaW4gYXNcbiAgICAgICAgLy8gdGhlIG9ubHkgcGFyYW1ldGVyLiBBZnRlcndhcmQgdGhlIHF1ZXVlIGlzIGludm9rZWQgd2hpY2ggd2lsbCBiZWdpbiBtb3ZpbmcgdGhyb3VnaCB0aGUgXG4gICAgICAgIC8vIGxpc3Qgb2YgbW9kaWZpZXJzXG4gICAgICAgIHRoaXMubW9kaWZpZXJzW21vZGlmaWVyS2V5XSA9IChpbmRleCwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgIC8vIHdyYXAgdGhlIGxpbmtlZE1vZGlmaWVyIGFnYWluIHNvIHRoYXQgaXQgY2FuIGJlIGFkZGVkIHRvIHRoZSBhc3luYyBxdWV1ZSB3aXRob3V0IGJlaW5nIGludm9rZWRcbiAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGFzeW5jICgpID0+IGF3YWl0IGxpbmtlZE1vZGlmaWVyKGAke3RoaXMubmFtZX1fJHtpbmRleH1gLCBwYXlsb2FkKTtcbiAgICAgICAgICAvLyBzaW5jZSB0aGUgbW9kaWZpZXIgaXMgY2FsbGVkIG9uIHRoZSBBUlJBWS9PQkpFQ1Qgbm9kZSwgd2UgbmVlZCB0byBhZGQgdGhlIGNhbGxiYWNrXG4gICAgICAgICAgLy8gdG8gdGhlIHF1ZXVlIG9mIHRoZSBjaGlsZC4gVGhlIG5hbWluZyBjb252ZW50aW9uIGlzOiAnb2JqZWN0TmFtZV9pJyB8fCAnb2JqZWN0TmFtZV9rZXknXG4gICAgICAgICAgaWYodGhpcy5kZXZUb29sKSB7XG4gICAgICAgICAgICBjYWxsYmFjay5tb2RpZmllck5hbWUgPSBtb2RpZmllcktleTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhhdC52YWx1ZVtgJHt0aGlzLm5hbWV9XyR7aW5kZXh9YF0ucXVldWUucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgdGhhdC52YWx1ZVtgJHt0aGlzLm5hbWV9XyR7aW5kZXh9YF0ucnVuUXVldWUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgXG4gICAgT2JqZWN0LmtleXModGhpcy5tb2RpZmllcnMpLmZvckVhY2goIG1vZGlmaWVyS2V5ID0+IHtcbiAgICAgIHRoaXMudmlydHVhbE5vZGVbbW9kaWZpZXJLZXldID0gdGhpcy5tb2RpZmllcnNbbW9kaWZpZXJLZXldO1xuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQSBtaWRkbGVtYW4gZnVuY3Rpb24gdXNlZCBmb3IgcmVkaXJlY3Rpb24uIFNob3VsZCBiZSBjYWxsZWQgd2l0aCBhbiBvYmplY3QgbmVlZGVkIHJlY29uc3RydWN0aW9uXG4gICAqIGFuZCB3aWxsIHRoZW4gYWNjdXJhdGVseSBhc3NpZ24gaXRzIG5leHQgZGVzdGluYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNpbG9Ob2RlTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBzaWxvTm9kZVxuICAgKiBAcGFyYW0ge29iamVjdH0gY3VyclNpbG9Ob2RlIC0gVGhlIGFkZHJlc3Mgb2YgdGhlIHBhcmVudCAnT0JKRUNUL0FSUkFZJyBzaWxvTm9kZVxuICAgKi9cbiAgcmVjb25zdHJ1Y3Qoc2lsb05vZGVOYW1lLCBjdXJyU2lsb05vZGUpIHtcbiAgICBsZXQgcmVjb25zdHJ1Y3RlZE9iamVjdDtcbiAgICBpZiAoY3VyclNpbG9Ob2RlLnR5cGUgPT09IHR5cGVzLk9CSkVDVCkgcmVjb25zdHJ1Y3RlZE9iamVjdCA9IHRoaXMucmVjb25zdHJ1Y3RPYmplY3Qoc2lsb05vZGVOYW1lLCBjdXJyU2lsb05vZGUpO1xuICAgIGVsc2UgaWYgKGN1cnJTaWxvTm9kZS50eXBlID09PSB0eXBlcy5BUlJBWSkgcmVjb25zdHJ1Y3RlZE9iamVjdCA9IHRoaXMucmVjb25zdHJ1Y3RBcnJheShzaWxvTm9kZU5hbWUsIGN1cnJTaWxvTm9kZSk7XG4gICAgLy8gY2FsbGVkIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaW4gaXMgYSBwcmltaXRpdmVcbiAgICBlbHNlIHJldHVybiBjdXJyU2lsb05vZGUudmFsdWU7XG5cbiAgICByZXR1cm4gcmVjb25zdHJ1Y3RlZE9iamVjdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNvbnN0cnVjdHMgcGxhaW4gb2JqZWN0cyBvdXQgb2Ygc2lsb05vZGUgdmFsdWVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaWxvTm9kZU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgc2lsb05vZGVcbiAgICogQHBhcmFtIHtvYmplY3R9IGN1cnJTaWxvTm9kZSAtIFRoZSBhZGRyZXNzIG9mIHRoZSBwYXJlbnQgJ09CSkVDVCcgc2lsb05vZGVcbiAgICovXG4gIHJlY29uc3RydWN0T2JqZWN0KHNpbG9Ob2RlTmFtZSwgY3VyclNpbG9Ob2RlKSB7XG4gICAgLy8gb3VyIGN1cnJlbnRseSBlbXB0eSBvYmplY3QgdG8gYmUgdXNlZCBmb3IgcmVjb25zdHJ1Y3Rpb25cbiAgICBjb25zdCBuZXdPYmplY3QgPSB7fTtcbiAgICAvLyBsb29wIHRocm91Z2ggdGhlIHNpbG9Ob2RlcyBzdG9yZWQgaW4gdGhlICdPQkpFQ1QnIHZhbHVlIHRvIGV4dHJhY3QgdGhlIGRhdGFcbiAgICBPYmplY3Qua2V5cyhjdXJyU2lsb05vZGUudmFsdWUpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIC8vIHNpbXBsaWZpZWQgbmFtZVxuICAgICAgY29uc3QgY2hpbGRPYmogPSBjdXJyU2lsb05vZGUudmFsdWVba2V5XTtcbiAgICAgIFxuICAgICAgLy8gZ2V0IHRoZSBrZXlOYW1lIGZyb20gdGhlIG5hbWluZyBjb252ZW50aW9uXG4gICAgICAvLyBpZiB0aGUgc2lsb05vZGUgbmFtZSBpcyAnY2FydF9zaGlydHMnLCB0aGUgc2xpY2Ugd2lsbCBnaXZlIHVzICdzaGlydHMnXG4gICAgICBjb25zdCBleHRyYWN0ZWRLZXkgPSBrZXkuc2xpY2Uoc2lsb05vZGVOYW1lLmxlbmd0aCArIDEpO1xuICAgICAgLy8gaWYgYW4gYWRkaXRpb25hbCBvYmplY3QgaXMgc3RvcmVkIGluIHRoZSB2YWx1ZXMsIHRoZW4gd2UgbXVzdCByZWN1cnNlIHRvXG4gICAgICAvLyByZWNvbnN0cnVjdCB0aGUgbmVzdGVkIG9iamVjdCBhcyB3ZWxsXG4gICAgICBpZiAoY2hpbGRPYmoudHlwZSA9PT0gdHlwZXMuT0JKRUNUIHx8IGNoaWxkT2JqLnR5cGUgPT09IHR5cGVzLkFSUkFZKSB7XG4gICAgICAgIG5ld09iamVjdFtleHRyYWN0ZWRLZXldID0gdGhpcy5yZWNvbnN0cnVjdChrZXksIGNoaWxkT2JqKTtcbiAgICAgIH1cbiAgICAgIC8vIG90aGVyd2lzZSB3ZSBoYXZlIGEgcHJpbWl0aXZlIHZhbHVlIHdoaWNoIGNhbiBlYXNpbHkgYmUgYWRkZWQgdG8gdGhlIHJlY29uc3RydWN0ZWRcbiAgICAgIC8vIG9iamVjdCB1c2luZyBvdXIgZXh0cmFjdGVkS2V5IHRvIHByb3Blcmx5IGxhYmVsIGl0IFxuICAgICAgZWxzZSBpZiAoY2hpbGRPYmoudHlwZSA9PT0gdHlwZXMuUFJJTUlUSVZFKSB7XG4gICAgICAgIG5ld09iamVjdFtleHRyYWN0ZWRLZXldID0gY2hpbGRPYmoudmFsdWU7XG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIG9iamVjdCBzdWNjZXNzZnVsbHkgcmVjb25zdHJ1Y3RlZCBhdCB0aGlzIGxldmVsXG4gICAgcmV0dXJuIG5ld09iamVjdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNvbnN0cnVjdHMgYXJyYXlzIG91dCBvZiBzaWxvTm9kZSB2YWx1ZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNpbG9Ob2RlTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBzaWxvTm9kZVxuICAgKiBAcGFyYW0ge29iamVjdH0gY3VyclNpbG9Ob2RlIC0gVGhlIGFkZHJlc3Mgb2YgdGhlIHBhcmVudCAnQVJSQVknIHNpbG9Ob2RlXG4gICAqL1xuICByZWNvbnN0cnVjdEFycmF5KHNpbG9Ob2RlTmFtZSwgY3VyclNpbG9Ob2RlKSB7XG4gICAgLy8gb3VyIGN1cnJlbnRseSBlbXB0eSBhcnJheSB0byBiZSB1c2VkIGZvciByZWNvbnN0cnVjdGlvblxuICAgIGNvbnN0IG5ld0FycmF5ID0gW107XG4gICAgLy8gbG9vcCB0aHJvdWdoIHRoZSBzaWxvTm9kZXMgc3RvcmVkIGluIHRoZSAnQVJSQVknIHZhbHVlIHRvIGV4dHJhY3QgdGhlIGRhdGFcbiAgICBPYmplY3Qua2V5cyhjdXJyU2lsb05vZGUudmFsdWUpLmZvckVhY2goKGtleSwgaSkgPT4ge1xuICAgICAgLy8gc2ltcGxpZmllZCBuYW1lXG4gICAgICBjb25zdCBjaGlsZE9iaiA9IGN1cnJTaWxvTm9kZS52YWx1ZVtrZXldO1xuICAgICAgLy8gaWYgYW4gYWRkaXRpb25hbCBvYmplY3QgaXMgc3RvcmVkIGluIHRoZSB2YWx1ZXMsIHRoZW4gd2UgbXVzdCByZWN1cnNlIHRvXG4gICAgICAvLyByZWNvbnN0cnVjdCB0aGUgbmVzdGVkIG9iamVjdCBhcyB3ZWxsXG4gICAgICBpZiAoY2hpbGRPYmoudHlwZSA9PT0gdHlwZXMuQVJSQVkgfHwgY2hpbGRPYmoudHlwZSA9PT0gdHlwZXMuT0JKRUNUKSB7XG4gICAgICAgIG5ld0FycmF5LnB1c2godGhpcy5yZWNvbnN0cnVjdChgJHtzaWxvTm9kZU5hbWV9XyR7aX1gLCBjaGlsZE9iaikpO1xuICAgICAgfSBcbiAgICAgIC8vIG90aGVyd2lzZSB3ZSBoYXZlIGEgcHJpbWl0aXZlIHZhbHVlIHdoaWNoIGNhbiBlYXNpbHkgYmUgYWRkZWQgdG8gdGhlIHJlY29uc3RydWN0ZWRcbiAgICAgIC8vIG9iamVjdCB1c2luZyBvdXIgZXh0cmFjdGVkS2V5IHRvIHByb3Blcmx5IGxhYmVsIGl0XG4gICAgICBlbHNlIGlmIChjaGlsZE9iai50eXBlID09PSB0eXBlcy5QUklNSVRJVkUpIHtcbiAgICAgICAgbmV3QXJyYXkucHVzaChjaGlsZE9iai52YWx1ZSk7XG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIGFycmF5IHN1Y2Nlc3NmdWxseSByZWNvbnN0cnVjdGVkIGF0IHRoaXMgbGV2ZWxcbiAgICByZXR1cm4gbmV3QXJyYXk7XG4gIH1cblxuICBnZXRTdGF0ZSgpe1xuICAgIGlmKHRoaXMudHlwZSA9PT0gdHlwZXMuQ09OVEFJTkVSKXtcbiAgICAgIHJldHVybiB0aGlzLnZpcnR1YWxOb2RlXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBjb250ZXh0ID0gdGhpcy52aXJ0dWFsTm9kZTtcbiAgICAgIHdoaWxlKGNvbnRleHQudHlwZSAhPT0gdHlwZXMuQ09OVEFJTkVSKXtcbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQucGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbG9Ob2RlOyIsIi8vIGltcG9ydCBzdGF0ZSBjbGFzcyBmb3IgaW5zdGFuY2VvZiBjaGVja1xuaW1wb3J0IENvbnN0cnVjdG9yTm9kZSBmcm9tICcuL2NvbnN0cnVjdG9yTm9kZS5qcyc7XG5pbXBvcnQgU2lsb05vZGUgZnJvbSAnLi9zaWxvTm9kZS5qcyc7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuL2NvbnN0YW50cy5qcydcbmltcG9ydCB2aXJ0dWFsTm9kZSBmcm9tICcuL3ZpcnR1YWxOb2RlLmpzJ1xuXG5jb25zdCBzaWxvID0ge307XG5jb25zdCB2aXJ0dWFsU2lsbyA9IHt9O1xuXG4vKipcbiAqIFRha2VzIGFsbCBvZiB0aGUgY29uc3RydWN0b3JOb2RlcyBjcmVhdGVkIGJ5IHRoZSBkZXZlbG9wZXIgYW5kIHR1cm5zIHRoZW0gaW50byB0aGUgc2lsb1xuICogQHBhcmFtICB7Li4uQ29uc3RydWN0b3JOb2RlfSBhcmdzIC0gQSBsaXN0IG9mIGNvbnN0cnVjdG9yIE5vZGVzXG4gKi9cblxuZnVuY3Rpb24gY29tYmluZU5vZGVzKC4uLmFyZ3MpIHtcbiAgbGV0IGRldlRvb2wgPSBudWxsO1xuICBpZihhcmdzWzBdICYmIGFyZ3NbMF0uZGV2VG9vbCA9PT0gdHJ1ZSkge1xuICAgIGRldlRvb2wgPSBhcmdzWzBdO1xuICAgIGFyZ3Muc2hpZnQoKTtcbiAgfVxuICBpZiAoYXJncy5sZW5ndGggPT09IDApIHRocm93IG5ldyBFcnJvcignY29tYmluZU5vZGVzIGZ1bmN0aW9uIHRha2VzIGF0IGxlYXN0IG9uZSBjb25zdHJ1Y3Rvck5vZGUnKTtcblxuICAvLyBoYXN0YWJsZSBhY2NvdW50cyBmb3IgcGFzc2luZyBpbiBjb25zdHJ1Y3Rvck5vZGVzIGluIGFueSBvcmRlci4gXG4gIC8vIGhhc2h0YWJsZSBvcmdhbml6ZXMgYWxsIG5vZGVzIGludG8gcGFyZW50LWNoaWxkIHJlbGF0aW9uc2hpcHMgc28gdGhlIHNpbG8gaXMgZWFzaWVyIHRvIGNyZWF0ZVxuICBjb25zdCBoYXNoVGFibGUgPSB7fTtcblxuICAvLyBsb29wIHRocm91Z2ggdGhlIGNvbnN0cnVjdG9yTm9kZXMgcGFzc2VkIGluIGFzIGFyZ3VtZW50c1xuICBhcmdzLmZvckVhY2goY29uc3RydWN0b3JOb2RlID0+IHtcbiAgICBpZiAoIWNvbnN0cnVjdG9yTm9kZSB8fCBjb25zdHJ1Y3Rvck5vZGUuY29uc3RydWN0b3IubmFtZSAhPT0gJ0NvbnN0cnVjdG9yTm9kZScpIHRocm93IG5ldyBFcnJvcignT25seSBjb25zdHJ1Y3Rvck5vZGVzIGNhbiBiZSBwYXNzZWQgdG8gY29tYmluZU5vZGVzJyk7XG4gICAgLy8gYSBub2RlIHdpdGggYSBudWxsIHBhcmVudCB3aWxsIGJlIHRoZSByb290IG5vZGUsIGFuZCB0aGVyZSBjYW4gb25seSBiZSBvbmVcbiAgICBlbHNlIGlmIChjb25zdHJ1Y3Rvck5vZGUucGFyZW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBjaGVjayB0byBzZWUgaWYgdGhlIHJvb3Qga2V5IGFscmVhZHkgZXhpc3RzIGluIHRoZSBoYXNodGFibGUuIElmIHNvLCB0aGlzIG1lYW5zIGEgcm9vdFxuICAgICAgLy8gaGFzIGFscmVhZHkgYmVlbiBlc3RhYmxpc2hlZFxuICAgICAgaWYgKCFoYXNoVGFibGUucm9vdCkgaGFzaFRhYmxlLnJvb3QgPSBbY29uc3RydWN0b3JOb2RlXTtcbiAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdPbmx5IG9uZSBjb25zdHJ1Y3RvciBub2RlIGNhbiBoYXZlIG51bGwgcGFyZW50Jyk7XG4gICAgfSBcbiAgICAvLyBpZiB0aGUgcGFyZW50IGlzbid0IG51bGwsIHRoZW4gdGhlIHBhcmVudCBpcyBhbm90aGVyIG5vZGVcbiAgICBlbHNlIHtcbiAgICAgIC8vIGlmIHRoZSBwYXJlbnQgZG9lc24ndCBleGlzdCBhcyBhIGtleSB5ZXQsIHdlIHdpbGwgY3JlYXRlIHRoZSBrZXkgYW5kIHNldCBpdCB0byBhbiBhcnJheVxuICAgICAgLy8gdGhhdCBjYW4gYmUgZmlsbGVkIHdpdGggYWxsIHBvc3NpYmxlIGNoaWxkcmVuXG4gICAgICBpZiAoIWhhc2hUYWJsZVtjb25zdHJ1Y3Rvck5vZGUucGFyZW50XSkgaGFzaFRhYmxlW2NvbnN0cnVjdG9yTm9kZS5wYXJlbnRdID0gW2NvbnN0cnVjdG9yTm9kZV07XG4gICAgICAvLyBpZiBwYXJlbnQgYWxyZWFkeSBleGlzdHMsIGFuZCBub2RlIGJlaW5nIGFkZGVkIHdpbGwgYXBwZW5kIHRvIHRoZSBhcnJheSBvZiBjaGlsZHJlblxuICAgICAgZWxzZSBoYXNoVGFibGVbY29uc3RydWN0b3JOb2RlLnBhcmVudF0ucHVzaChjb25zdHJ1Y3Rvck5vZGUpO1xuICAgIH1cbiAgfSkgXG5cbiAgLy8gZW5zdXJlIHRoZXJlIGlzIGEgZGVmaW5lZCByb290IGJlZm9yZSBjb250aW51aW5nXG4gIGlmICghaGFzaFRhYmxlLnJvb3QpIHRocm93IG5ldyBFcnJvcignQXQgbGVhc3Qgb25lIGNvbnN0cnVjdG9yIG5vZGUgbXVzdCBoYXZlIGEgbnVsbCBwYXJlbnQnKTtcblxuICAvLyBhIHJlY3Vyc2l2ZSBmdW5jdGlvbiB0aGF0IHdpbGwgY3JlYXRlIHNpbG9Ob2RlcyBhbmQgcmV0dXJuIHRoZW0gdG8gYSBwYXJlbnRcbiAgZnVuY3Rpb24gbWFwVG9TaWxvKGNvbnN0cnVjdG9yTm9kZSA9ICdyb290JywgcGFyZW50Q29uc3RydWN0b3JOb2RlID0gbnVsbCkge1xuICAgIC8vIHRoZSB2ZXJ5IGZpcnN0IHBhc3Mgd2lsbCBzZXQgdGhlIHBhcmVudCB0byByb290XG4gICAgY29uc3QgY29uc3RydWN0b3JOb2RlTmFtZSA9IChjb25zdHJ1Y3Rvck5vZGUgPT09ICdyb290JykgPyAncm9vdCcgOiBjb25zdHJ1Y3Rvck5vZGUubmFtZTtcblxuICAgIC8vIHJlY3Vyc2l2ZSBiYXNlIGNhc2UsIHdlIG9ubHkgY29udGludWUgaWYgdGhlIGN1cnJlbnQgbm9kZSBoYXMgYW55IGNvbnN0cnVjdG9yTm9kZSBjaGlsZHJlblxuICAgIGlmICghaGFzaFRhYmxlW2NvbnN0cnVjdG9yTm9kZU5hbWVdKSByZXR1cm47XG5cbiAgICBjb25zdCBjaGlsZHJlbiA9IHt9O1xuXG4gICAgLy8gbG9vcCB0aHJvdWdoIHRoZSBjaGlsZHJlbiBhcnJheXMgaW4gdGhlIGhhc2h0YWJsZVxuICAgIGhhc2hUYWJsZVtjb25zdHJ1Y3Rvck5vZGVOYW1lXS5mb3JFYWNoKGN1cnJDb25zdHJ1Y3Rvck5vZGUgPT4ge1xuICAgICAgY29uc3QgdmFsdWVzT2ZDdXJyU2lsb05vZGUgPSB7fTtcbiAgICAgIGNoaWxkcmVuW2N1cnJDb25zdHJ1Y3Rvck5vZGUubmFtZV0gPSBuZXcgU2lsb05vZGUoY3VyckNvbnN0cnVjdG9yTm9kZS5uYW1lLCB2YWx1ZXNPZkN1cnJTaWxvTm9kZSwgcGFyZW50Q29uc3RydWN0b3JOb2RlLCB7fSwgdHlwZXMuQ09OVEFJTkVSLCBkZXZUb29sKTtcbiAgICAgIFxuICAgICAgLy8gYWJzdHJhY3Qgc29tZSB2YXJpYWJsZXNcbiAgICAgIGNvbnN0IGN1cnJTaWxvTm9kZSA9IGNoaWxkcmVuW2N1cnJDb25zdHJ1Y3Rvck5vZGUubmFtZV07XG4gICAgICBjb25zdCBzdGF0ZU9mQ3VyckNvbnN0cnVjdG9yTm9kZSA9IGN1cnJDb25zdHJ1Y3Rvck5vZGUuc3RhdGU7XG5cbiAgICAgIC8vIGNyZWF0ZSBTaWxvTm9kZXMgZm9yIGFsbCB0aGUgdmFyaWFibGVzIGluIHRoZSBjdXJyQ29uc3RydWN0b3JOb2RlXG4gICAgICBPYmplY3Qua2V5cyhzdGF0ZU9mQ3VyckNvbnN0cnVjdG9yTm9kZSkuZm9yRWFjaCh2YXJJbkNvbnN0cnVjdG9yTm9kZVN0YXRlID0+IHtcbiAgICAgICAgLy8gaXMgdGhlIHZhcmlhYmxlIGlzIGFuIG9iamVjdC9hcnJheSwgd2UgbmVlZCB0byBkZWNvbnN0cnVjdCBpdCBpbnRvIGZ1cnRoZXIgc2lsb05vZGVzXG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGVPZkN1cnJDb25zdHJ1Y3Rvck5vZGVbdmFySW5Db25zdHJ1Y3Rvck5vZGVTdGF0ZV0udmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdmFsdWVzT2ZDdXJyU2lsb05vZGVbdmFySW5Db25zdHJ1Y3Rvck5vZGVTdGF0ZV0gPSBjdXJyU2lsb05vZGUuZGVjb25zdHJ1Y3RPYmplY3RJbnRvU2lsb05vZGVzKHZhckluQ29uc3RydWN0b3JOb2RlU3RhdGUsIHN0YXRlT2ZDdXJyQ29uc3RydWN0b3JOb2RlW3ZhckluQ29uc3RydWN0b3JOb2RlU3RhdGVdLCBjdXJyU2lsb05vZGUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG90aGVyd2lzZSBwcmltaXRpdmVzIGNhbiBiZSBzdG9yZWQgaW4gc2lsb05vZGVzIGFuZCB0aGUgbW9kaWZpZXJzIHJ1blxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YWx1ZXNPZkN1cnJTaWxvTm9kZVt2YXJJbkNvbnN0cnVjdG9yTm9kZVN0YXRlXSA9IG5ldyBTaWxvTm9kZSh2YXJJbkNvbnN0cnVjdG9yTm9kZVN0YXRlLCBzdGF0ZU9mQ3VyckNvbnN0cnVjdG9yTm9kZVt2YXJJbkNvbnN0cnVjdG9yTm9kZVN0YXRlXS52YWx1ZSwgY3VyclNpbG9Ob2RlLCBzdGF0ZU9mQ3VyckNvbnN0cnVjdG9yTm9kZVt2YXJJbkNvbnN0cnVjdG9yTm9kZVN0YXRlXS5tb2RpZmllcnMsIHR5cGVzLlBSSU1JVElWRSwgZGV2VG9vbCk7XG4gICAgICAgICAgdmFsdWVzT2ZDdXJyU2lsb05vZGVbdmFySW5Db25zdHJ1Y3Rvck5vZGVTdGF0ZV0ubGlua01vZGlmaWVycygpO1xuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICAvLyByZWN1cnNpdmVseSBjaGVjayB0byBzZWUgaWYgdGhlIGN1cnJlbnQgY29uc3RydWN0b3JOb2RlL3NpbG9Ob2RlIGhhcyBhbnkgY2hpbGRyZW4gXG4gICAgICBjb25zdCBzaWxvTm9kZUNoaWxkcmVuID0gbWFwVG9TaWxvKGN1cnJDb25zdHJ1Y3Rvck5vZGUsIGN1cnJTaWxvTm9kZSk7XG4gICAgICAvLyBpZiBhIE5vZGUgZGlkIGhhdmUgY2hpbGRyZW4sIHdlIHdpbGwgYWRkIHRob3NlIHJldHVybmVkIHNpbG9Ob2RlcyBhcyB2YWx1ZXNcbiAgICAgIC8vIGludG8gdGhlIGN1cnJlbnQgc2lsb05vZGVcbiAgICAgIGlmIChzaWxvTm9kZUNoaWxkcmVuKSB7IFxuICAgICAgICBPYmplY3Qua2V5cyhzaWxvTm9kZUNoaWxkcmVuKS5mb3JFYWNoKHNpbG9Ob2RlID0+IHtcbiAgICAgICAgICB2YWx1ZXNPZkN1cnJTaWxvTm9kZVtzaWxvTm9kZV0gPSBzaWxvTm9kZUNoaWxkcmVuW3NpbG9Ob2RlXTtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIC8vIGhlcmUgd2Ugd2lsbCBnZXQgdGhlIHJvb3Qgc2lsb05vZGUgd2l0aCBhbGwgaXRzIGNoaWxkcmVuIGFkZGVkXG4gIGNvbnN0IHdyYXBwZWRSb290U2lsb05vZGUgPSBtYXBUb1NpbG8oKTtcblxuICAvLyBhZGQgdGhlIHNpbG9Ob2RlIHJvb3QgdG8gdGhlIHBsYWluIHNpbG8gb2JqZWN0XG4gIC8vIGl0IHdpbGwgYWx3YXlzIG9ubHkgYmUgYSBzaW5nbGUga2V5ICh0aGUgcm9vdCkgdGhhdCBpcyBhZGRlZCBpbnRvIHRoZSBzaWxvXG4gIE9iamVjdC5rZXlzKHdyYXBwZWRSb290U2lsb05vZGUpLmZvckVhY2gocm9vdFNpbG9Ob2RlID0+IHtcbiAgICBzaWxvW3Jvb3RTaWxvTm9kZV0gPSB3cmFwcGVkUm9vdFNpbG9Ob2RlW3Jvb3RTaWxvTm9kZV07XG4gIH0pO1xuICBcbiAgZnVuY3Rpb24gaWRlbnRpZnkgKCkge1xuICAgIC8vZWFjaCBub2RlJ3MgSUQgaXMgYSBzbmFrZV9jYXNlIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgYSBcbiAgICAvL3JvdXRlIHRvIHRoYXQgbm9kZSBmcm9tIHRoZSB0b3Agb2YgdGhlIHNpbG8gYnkgbmFtZVxuICAgIGZvckVhY2hTaWxvTm9kZShub2RlID0+IHtcbiAgICAgIG5vZGUuaXNzdWVJRCgpXG4gICAgfSk7XG4gIH1cblxuICBpZGVudGlmeSgpO1xuXG4gIGZ1bmN0aW9uIHZpcnR1YWxpemUgKCkgeyAvL3J1bnMgdGhyb3VnaCBlYWNoIG5vZGUgaW4gdGhlIHRyZWUsIHR1cm5zIGl0IGludG8gYSB2aXJ0dWFsIG5vZGUgaW4gdGhlIHZTaWxvXG4gICAgZm9yRWFjaFNpbG9Ob2RlKG5vZGUgPT4ge1xuICAgICAgaWYoIXZpcnR1YWxTaWxvW25vZGUuaWRdKXtcbiAgICAgICAgdmlydHVhbFNpbG9bbm9kZS5pZF0gPSBub2RlLnZpcnR1YWxOb2RlO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB2aXJ0dWFsaXplKCk7XG4gICAgXG4gIGZvckVhY2hTaWxvTm9kZShub2RlID0+IHtcbiAgICAvLyBhcHBseSBrZXlTdWJzY3JpYmUgb25seSB0byBvYmplY3QgYW5kIGFycmF5IHNpbG8gbm9kZXNcbiAgICBpZiAobm9kZS50eXBlID09PSAnT0JKRUNUJyB8fCBub2RlLnR5cGUgPT09IFwiQVJSQVlcIikge1xuICAgICAgbm9kZS5tb2RpZmllcnMua2V5U3Vic2NyaWJlID0gKGtleSwgcmVuZGVyRnVuYykgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gbm9kZS5uYW1lICsgXCJfXCIgKyBrZXk7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZWRBdEluZGV4ID0gbm9kZS52YWx1ZVtuYW1lXS5wdXNoVG9TdWJzY3JpYmVycyhyZW5kZXJGdW5jKTtcbiAgICAgICAgbm9kZS52YWx1ZVtuYW1lXS5ub3RpZnlTdWJzY3JpYmVycygpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge25vZGUucmVtb3ZlRnJvbVN1YnNjcmliZXJzQXRJbmRleChzdWJzY3JpYmVkQXRJbmRleCl9XG4gICAgICB9XG4gICAgfX0pXG4gIFxuICBzaWxvLnZpcnR1YWxTaWxvID0gdmlydHVhbFNpbG87XG4gIHJldHVybiBzaWxvO1xufVxuXG4vKipcbiAqIEFwcGxpZXMgdGhlIGNhbGxiYWNrIHRvIGV2ZXJ5IHNpbG9Ob2RlIGluIHRoZSBzaWxvXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIEEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGEgc2lsb05vZGUgYXMgaXRzIHBhcmFtZXRlclxuICovXG5cbi8vIGNhbGxiYWNrcyBoYXZlIHRvIGFjY2VwdCBhIFNJTE9OT0RFXG5mdW5jdGlvbiBmb3JFYWNoU2lsb05vZGUoY2FsbGJhY2spIHtcbiAgLy8gYWNjZXNzaW5nIHRoZSBzaW5nbGUgcm9vdCBpbiB0aGUgc2lsb1xuICBPYmplY3Qua2V5cyhzaWxvKS5mb3JFYWNoKHNpbG9Ob2RlUm9vdEtleSA9PiB7XG4gICAgaW5uZXIoc2lsb1tzaWxvTm9kZVJvb3RLZXldLCBjYWxsYmFjayk7XG4gIH0pXG5cbiAgLy8gcmVjdXJzaXZlbHkgbmF2aWdhdGUgdG8gZXZlcnkgc2lsb05vZGVcbiAgZnVuY3Rpb24gaW5uZXIoaGVhZCwgY2FsbGJhY2spIHtcbiAgICBpZiAoaGVhZC5jb25zdHJ1Y3Rvci5uYW1lID09PSAnU2lsb05vZGUnKSB7XG4gICAgICBjYWxsYmFjayhoZWFkKTtcbiAgICAgIGlmIChoZWFkLnR5cGUgPT09IHR5cGVzLlBSSU1JVElWRSkgcmV0dXJuOyAvLyByZWN1cnNpdmUgYmFzZSBjYXNlXG4gICAgICBcbiAgICAgIGVsc2Uge1xuICAgICAgICBPYmplY3Qua2V5cyhoZWFkLnZhbHVlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgaWYgKGhlYWQudmFsdWVba2V5XS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnU2lsb05vZGUnKSB7XG4gICAgICAgICAgICBpbm5lcihoZWFkLnZhbHVlW2tleV0sIGNhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogU3Vic2NyaWJlcyBjb21wb25lbnRzIHRvIHNpbG9Ob2RlcyBpbiB0aGUgc2lsb1xuICogQHBhcmFtICB7ZnVuY3Rpb259IHJlbmRlckZ1bmN0aW9uIC0gRnVuY3Rpb24gdG8gYmUgYXBwZW5kZWQgdG8gc3Vic2NyaWJlcnMgYXJyYXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgcmVsZXZhbnQgY29tcG9uZW50IHdpdGggJ1N0YXRlJyBhcHBlbmRlZFxuICovXG5cbnNpbG8uc3Vic2NyaWJlID0gKHJlbmRlckZ1bmN0aW9uLCBuYW1lKSA9PiB7XG4gIGlmICghbmFtZSkge1xuICAgIGlmICghIXJlbmRlckZ1bmN0aW9uLnByb3RvdHlwZSkge1xuICAgICAgbmFtZSA9IHJlbmRlckZ1bmN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lICsgJ1N0YXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgY2FuXFwndCB1c2UgYW4gYW5vbnltb3VzIGZ1bmN0aW9uIGluIHN1YnNjcmliZSB3aXRob3V0IGEgbmFtZSBhcmd1bWVudC4nKTtcbiAgICB9XG4gIH1cblxuICBsZXQgZm91bmROb2RlO1xuICBsZXQgc3Vic2NyaWJlZEF0SW5kZXg7XG4gIGNvbnN0IGZvdW5kTm9kZUNoaWxkcmVuID0gW107XG5cbiAgZm9yRWFjaFNpbG9Ob2RlKG5vZGUgPT4ge1xuICAgIGlmKG5vZGUubmFtZSA9PT0gbmFtZSl7XG4gICAgICBzdWJzY3JpYmVkQXRJbmRleCA9IG5vZGUucHVzaFRvU3Vic2NyaWJlcnMocmVuZGVyRnVuY3Rpb24pXG4gICAgICBmb3VuZE5vZGUgPSBub2RlXG4gICAgICBmb3VuZE5vZGVDaGlsZHJlbi5wdXNoKHtub2RlOiBmb3VuZE5vZGUsIGluZGV4OiBzdWJzY3JpYmVkQXRJbmRleH0pO1xuICAgIH1cbiAgfSlcblxuICBsZXQgdW5zdWJzY3JpYmU7XG4gIFxuICBpZiAoISFmb3VuZE5vZGUpIHtcbiAgICBpZiAoZm91bmROb2RlLnZhbHVlKSB7XG4gICAgICBPYmplY3Qua2V5cyhmb3VuZE5vZGUudmFsdWUpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgbGV0IG5vZGUgPSBmb3VuZE5vZGUudmFsdWVba2V5XTtcbiAgICAgICAgaWYobm9kZS50eXBlICE9PSAnQ09OVEFJTkVSJyl7XG4gICAgICAgICAgc3Vic2NyaWJlZEF0SW5kZXggPSBub2RlLnB1c2hUb1N1YnNjcmliZXJzKHJlbmRlckZ1bmN0aW9uKTtcbiAgICAgICAgICBmb3VuZE5vZGVDaGlsZHJlbi5wdXNoKHtub2RlOiBub2RlLCBpbmRleDogc3Vic2NyaWJlZEF0SW5kZXh9KTtcbiAgXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdW5zdWJzY3JpYmUgPSAoKSA9PiAge1xuICAgICAgbGV0IG9iO1xuICAgICAgT2JqZWN0LmtleXMoZm91bmROb2RlQ2hpbGRyZW4pLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgb2IgPSBmb3VuZE5vZGVDaGlsZHJlbltrZXldOyBcbiAgICAgICAgb2IuX3N1YnNjcmliZXJzLnNwbGljZShvYi5pbmRleCwgMSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZm91bmROb2RlLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuXG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcihuZXcgRXJyb3IoJ1lvdSBhcmUgdHJ5aW5nIHRvIHN1YnNjcmliZSB0byBzb21ldGhpbmcgdGhhdCBpc25cXCd0IGluIHRoZSBzaWxvLicpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gZXJyRnVuYyAoKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG5ldyBFcnJvcignWW91IGFyZSB0cnlpbmcgdG8gcnVuIHVuc3Vic2NyaWJlIGZyb20gc29tZXRoaW5nIHRoYXQgd2FzblxcJ3QgaW4gdGhlIHNpbG8gaW4gdGhlIGZpcnN0IHBsYWNlLicpKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb21iaW5lTm9kZXM7IiwiaW1wb3J0ICdAYmFiZWwvcG9seWZpbGwnO1xuaW1wb3J0IGNvbWJpbmVOb2RlcyBmcm9tICcuL3JhZG9uL2NvbWJpbmVOb2Rlcyc7XG5pbXBvcnQgQ29uc3RydWN0b3JOb2RlIGZyb20gJy4vcmFkb24vY29uc3RydWN0b3JOb2RlJztcblxuZXhwb3J0IGNvbnN0IGNvbWJpbmVTdGF0ZSA9IGNvbWJpbmVOb2RlcztcbmV4cG9ydCBjb25zdCBTdGF0ZU5vZGUgPSBDb25zdHJ1Y3Rvck5vZGU7Il0sIm5hbWVzIjpbIkNvbnN0cnVjdG9yTm9kZSIsIm5hbWUiLCJwYXJlbnROYW1lIiwic3RhdGUiLCJwYXJlbnQiLCJpbml0aWFsaXplU3RhdGUiLCJ0aGlzIiwiYmluZCIsImluaXRpYWxpemVNb2RpZmllcnMiLCJpbml0aWFsU3RhdGUiLCJfdHlwZW9mIiwiQXJyYXkiLCJpc0FycmF5IiwiRXJyb3IiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsIm5ld1ZhcmlhYmxlSW5TdGF0ZSIsIl90aGlzIiwidmFsdWUiLCJtb2RpZmllcnMiLCJpbml0aWFsTW9kaWZpZXJzIiwibmV3TW9kaWZpZXJzSW5TdGF0ZSIsIl90aGlzMiIsIl9uYW1lIiwiX3BhcmVudCIsIl9zdGF0ZSIsIkFSUkFZIiwiT0JKRUNUIiwiUFJJTUlUSVZFIiwiQ09OVEFJTkVSIiwiVmlydHVhbE5vZGUiLCJub2RlIiwicGFyZW50cyIsInZpcnR1YWxOb2RlIiwiYW5jZXN0b3IiLCJ0eXBlIiwiaWQiLCJ0eXBlcyIsInZhbCIsImluY2x1ZGVzIiwic3BsaXQiLCJsZW5ndGgiLCJtb2RpZmllcktleSIsImRhdGEiLCJTaWxvTm9kZSIsImRldlRvb2wiLCJxdWV1ZSIsInN1YnNjcmliZXJzIiwibGlua01vZGlmaWVycyIsInJ1bk1vZGlmaWVycyIsIm5vdGlmeVN1YnNjcmliZXJzIiwiZ2V0U3RhdGUiLCJyZWNvbnN0cnVjdEFycmF5IiwicmVjb25zdHJ1Y3RPYmplY3QiLCJkZWNvbnN0cnVjdE9iamVjdEludG9TaWxvTm9kZXMiLCJyZWNvbnN0cnVjdCIsInB1c2hUb1N1YnNjcmliZXJzIiwicmVtb3ZlRnJvbVN1YnNjcmliZXJzQXRJbmRleCIsInJ1blF1ZXVlIiwia2V5U3Vic2NyaWJlIiwia2V5IiwicmVuZGVyRnVuY3Rpb24iLCJzdWJzY3JpYmVkQXRJbmRleCIsIl9zdWJzY3JpYmVycyIsInNwbGljZSIsImlzc3VlSUQiLCJwdXNoIiwiaW5kZXgiLCJzdWJjcmliZXJzIiwic2xpY2UiLCJfaWQiLCJmdW5jIiwicnVubmluZyIsIm5leHRNb2RpZmllciIsInNoaWZ0IiwicHJldmlvdXNTdGF0ZSIsIm5vdGlmeSIsIm1vZGlmaWVyTmFtZSIsInVwZGF0ZVRvIiwib2JqTmFtZSIsIm9iamVjdFRvRGVjb25zdHJ1Y3QiLCJydW5MaW5rZWRNb2RzIiwib2JqQ2hpbGRyZW4iLCJuZXdTaWxvTm9kZSIsImluZGV4ZWRWYWwiLCJpIiwiX3RoaXMzIiwibm9kZU5hbWUiLCJzdGF0ZU1vZGlmaWVycyIsInRoYXQiLCJsaW5rZWRNb2RpZmllciIsIm1vZGlmaWVyIiwicGF5bG9hZCIsIl90aGlzNCIsImNhbGxiYWNrIiwic2lsb05vZGVOYW1lIiwiY3VyclNpbG9Ob2RlIiwicmVjb25zdHJ1Y3RlZE9iamVjdCIsIm5ld09iamVjdCIsImNoaWxkT2JqIiwiZXh0cmFjdGVkS2V5IiwiX3RoaXM1IiwibmV3QXJyYXkiLCJfdGhpczYiLCJjb250ZXh0IiwiX3ZhbHVlIiwiX21vZGlmaWVycyIsIl9xdWV1ZSIsImNvbnN0cnVjdG9yIiwiX3R5cGUiLCJfdmlydHVhbE5vZGUiLCJzaWxvIiwidmlydHVhbFNpbG8iLCJjb21iaW5lTm9kZXMiLCJhcmdzIiwiaGFzaFRhYmxlIiwiY29uc3RydWN0b3JOb2RlIiwicm9vdCIsIndyYXBwZWRSb290U2lsb05vZGUiLCJtYXBUb1NpbG8iLCJwYXJlbnRDb25zdHJ1Y3Rvck5vZGUiLCJjb25zdHJ1Y3Rvck5vZGVOYW1lIiwiY2hpbGRyZW4iLCJjdXJyQ29uc3RydWN0b3JOb2RlIiwidmFsdWVzT2ZDdXJyU2lsb05vZGUiLCJzdGF0ZU9mQ3VyckNvbnN0cnVjdG9yTm9kZSIsInZhckluQ29uc3RydWN0b3JOb2RlU3RhdGUiLCJzaWxvTm9kZUNoaWxkcmVuIiwic2lsb05vZGUiLCJyb290U2lsb05vZGUiLCJmb3JFYWNoU2lsb05vZGUiLCJyZW5kZXJGdW5jIiwic2lsb05vZGVSb290S2V5IiwiaW5uZXIiLCJoZWFkIiwic3Vic2NyaWJlIiwicHJvdG90eXBlIiwiZm91bmROb2RlIiwidW5zdWJzY3JpYmUiLCJmb3VuZE5vZGVDaGlsZHJlbiIsIm9iIiwiY29uc29sZSIsImVycm9yIiwiY29tYmluZVN0YXRlIiwiU3RhdGVOb2RlIl0sIm1hcHBpbmdzIjoidWxDQUFNQSxzQ0FDUUMsT0FBTUMseURBQWEsa0NBQ3hCRCxLQUFPQSxPQUNQRSxNQUFRLFFBQ1JDLE9BQVNGLE9BRVRHLGdCQUFrQkMsS0FBS0QsZ0JBQWdCRSxLQUFLRCxXQUM1Q0Usb0JBQXNCRixLQUFLRSxvQkFBb0JELEtBQUtELG1FQVEzQ0csaUJBRWMsV0FBeEJDLFFBQU9ELElBQTZCRSxNQUFNQyxRQUFRSCxHQUFlLE1BQU0sSUFBSUksTUFBTSwyQkFHckZDLE9BQU9DLEtBQUtOLEdBQWNPLFFBQVEsU0FBQUMsR0FDaENDLEVBQUtmLE1BQU1jLEdBQXNCLENBQy9CRSxNQUFPVixFQUFhUSxHQUdwQkcsVUFBV0YsRUFBS2YsTUFBTWMsR0FBc0JDLEVBQUtmLE1BQU1jLEdBQW9CRyxVQUFZLGtEQVV6RUMsaUJBRWMsV0FBNUJYLFFBQU9XLElBQWlDVixNQUFNQyxRQUFRUyxHQUFtQixNQUFNLElBQUlSLE1BQU0sMkJBSTdGQyxPQUFPQyxLQUFLTSxHQUFrQkwsUUFBUSxTQUFBTSxHQUNwQ0MsRUFB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
